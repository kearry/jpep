// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for citizens and representatives
model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  password          String?
  image             String?
  role              String              @default("CITIZEN") // Instead of UserRole enum
  emailVerified     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  constituencyId    String?
  constituency      Constituency?       @relation(fields: [constituencyId], references: [id])
  sentMessages      Message[]           @relation("SentMessages")
  receivedMessages  Message[]           @relation("ReceivedMessages")
  feedback          Feedback[]
  petitionSignatures PetitionSignature[]
  account           Account[]
  session           Session[]
  representative    Representative?
}

// Auth Models for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Representative model with detailed profile information
model Representative {
  id                String              @id @default(cuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id])
  title             String
  party             String
  biography         String              @default("")
  phoneNumber       String?
  officeAddress     String?
  socialMedia       SocialMedia?
  website           String?
  constituencyId    String              @unique
  constituency      Constituency        @relation(fields: [constituencyId], references: [id])
  committeeMembers  CommitteeMember[]
  bills             Bill[]
  votingRecords     VotingRecord[]
  parliamentaryActivities ParliamentaryActivity[]
  statements        Statement[]
  performanceMetrics PerformanceMetric[]
}

model SocialMedia {
  id              String          @id @default(cuid())
  facebook        String?
  twitter         String?
  instagram       String?
  youtube         String?
  linkedIn        String?
  representativeId String          @unique
  representative  Representative  @relation(fields: [representativeId], references: [id], onDelete: Cascade)
}

// Constituency model
model Constituency {
  id              String          @id @default(cuid())
  name            String
  parish          String
  boundaries      String          // GeoJSON data
  population      Int?
  registeredVoters Int?
  demographics    String?         // JSON data for demographic breakdown
  projects        Project[]
  residents       User[]
  representative  Representative?
}

// Committee model
model Committee {
  id              String              @id @default(cuid())
  name            String
  description     String?
  members         CommitteeMember[]
}

model CommitteeMember {
  id              String          @id @default(cuid())
  representativeId String
  representative  Representative  @relation(fields: [representativeId], references: [id])
  committeeId     String
  committee       Committee       @relation(fields: [committeeId], references: [id])
  role            String          // Chair, Vice-Chair, Member, etc.
  startDate       DateTime
  endDate         DateTime?

  @@unique([representativeId, committeeId])
}

// Parliamentary activity models
model Bill {
  id              String          @id @default(cuid())
  title           String
  description     String
  status          String          // Instead of BillStatus enum
  introducedDate  DateTime
  lastUpdatedDate DateTime
  category        String
  documentUrl     String?
  sponsorId       String
  sponsor         Representative  @relation(fields: [sponsorId], references: [id])
  votingRecords   VotingRecord[]
}

model VotingRecord {
  id              String          @id @default(cuid())
  billId          String
  bill            Bill            @relation(fields: [billId], references: [id])
  representativeId String
  representative  Representative  @relation(fields: [representativeId], references: [id])
  vote            String          // Instead of Vote enum
  date            DateTime
  explanation     String?

  @@unique([billId, representativeId])
}

model ParliamentaryActivity {
  id              String          @id @default(cuid())
  representativeId String
  representative  Representative  @relation(fields: [representativeId], references: [id])
  activityType    String          // Instead of ActivityType enum
  date            DateTime
  description     String
  documentUrl     String?
}

model Statement {
  id              String          @id @default(cuid())
  representativeId String
  representative  Representative  @relation(fields: [representativeId], references: [id])
  topic           String
  content         String
  date            DateTime
  source          String
  url             String?
}

// Constituency development models
model Project {
  id              String          @id @default(cuid())
  title           String
  description     String
  status          String          // Instead of ProjectStatus enum
  budget          Float
  startDate       DateTime
  endDate         DateTime?
  constituencyId  String
  constituency    Constituency    @relation(fields: [constituencyId], references: [id])
  updates         ProjectUpdate[]
}

model ProjectUpdate {
  id              String          @id @default(cuid())
  projectId       String
  project         Project         @relation(fields: [projectId], references: [id])
  date            DateTime
  description     String
  imageUrl        String?
}

// Performance metrics
model PerformanceMetric {
  id              String          @id @default(cuid())
  representativeId String
  representative  Representative  @relation(fields: [representativeId], references: [id])
  metricType      String          // Instead of MetricType enum
  value           Float
  period          String          // e.g., "Q1 2023", "2022-2023"
  description     String?
}

// Communication models
model Message {
  id              String          @id @default(cuid())
  subject         String
  content         String
  senderId        String
  sender          User            @relation("SentMessages", fields: [senderId], references: [id])
  recipientId     String
  recipient       User            @relation("ReceivedMessages", fields: [recipientId], references: [id])
  read            Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Petition {
  id              String              @id @default(cuid())
  title           String
  description     String
  targetCount     Int
  createdAt       DateTime            @default(now())
  expiresAt       DateTime
  status          String              @default("ACTIVE")  // Instead of PetitionStatus enum
  signatures      PetitionSignature[]
}

model PetitionSignature {
  id              String          @id @default(cuid())
  petitionId      String
  petition        Petition        @relation(fields: [petitionId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  comment         String?

  @@unique([petitionId, userId])
}

model Feedback {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  content         String
  category        String          // Instead of FeedbackCategory enum
  createdAt       DateTime        @default(now())
}